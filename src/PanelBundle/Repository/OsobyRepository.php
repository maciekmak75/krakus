<?php

namespace PanelBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;

/**
 * OsobyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OsobyRepository extends \Doctrine\ORM\EntityRepository
{
    public function checkIfLoginExists($login)
    {
        $q = $this->createQueryBuilder('u')
            ->where('u.login = :login')->setParameter('login', $login)
            ->getQuery()->getResult();

        if (count($q)) {
            return TRUE;
        }
        return FALSE;
    }

    public function createLogin($imie, $nazwisko)
    {
        setlocale(LC_ALL, "en_US.utf8");
        $imie = str_replace("'", '', iconv('utf-8', 'us-ascii//TRANSLIT', mb_strtolower($imie, "UTF-8")));
        $nazwisko = str_replace("'", '', iconv('utf-8', 'us-ascii//TRANSLIT', mb_strtolower($nazwisko, "UTF-8")));
        $dlugosc = strlen($imie);
        $warunek = TRUE;
        for ($i = 1; $i <= $dlugosc; $i++) {
            $login = substr($imie, 0, $i) . $nazwisko;
            $warunek = $this->checkIfLoginExists($login);
            if (!$warunek)
                break;
        }
        if ($warunek) {
            $login = $this->createQueryBuilder('u')
                ->where('u.login LIKE :login')->setParameter('login', 'kadry%')
                ->addOrderBy('u.login', 'DESC')
                ->setMaxResults(1)
                ->getQuery()->getResult()[0]->getLogin();
            $login = substr($login, 0, 5) . (1 + substr($login, 5));
        }
        return $login;
    }

    public function findNoAnswer($idAnkieta, $sekcja, $status)
    {
        $sql = 'SELECT imie,nazwisko,status,sekcja,plec,glos,telefon, id FROM osoby WHERE id NOT IN (SELECT id_uzytkownik_id FROM odpowiedzi  WHERE id_ankieta_id = ?) ';
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('PanelBundle:Osoby', 'o');
        $rsm->addFieldResult('o', 'id', 'id');
        $rsm->addFieldResult('o', 'imie', 'imie');
        $rsm->addFieldResult('o', 'nazwisko', 'nazwisko');
        $rsm->addFieldResult('o', 'status', 'status');
        $rsm->addFieldResult('o', 'sekcja', 'sekcja');
        $rsm->addFieldResult('o', 'plec', 'plec');
        $rsm->addFieldResult('o', 'glos', 'glos');
        $rsm->addFieldResult('o', 'telefon', 'telefon');
// build rsm here
        if ($status == 1)
            $sql .= 'AND Status =1 ';
        if ($status == 2)
            $sql .= 'AND Status =2 ';
        if ($status == 3)
            $sql .= 'AND (Status =2 OR Status =1) ';
        if ($status == 4)
            $sql .= 'AND Status =4 ';
        if ($status == 5)
            $sql .= 'AND (Status =4 OR Status =1) ';
        if ($status == 6)
            $sql .= 'AND (Status =4 OR Status =2) ';
        if ($sekcja == 1)
            $sql .= 'AND Sekcja =1 ';
        if ($sekcja == 2)
            $sql .= 'AND Sekcja =2 ';
        if ($sekcja == 3)
            $sql .= 'AND (Sekcja =1 OR Sekcja =2) ';
        if ($sekcja == 4)
            $sql .= 'AND Sekcja =4 ';
        if ($sekcja == 5)
            $sql .= 'AND (Sekcja =1 OR Sekcja =4) ';
        if ($sekcja == 6)
            $sql .= 'AND (Sekcja =4 OR Sekcja =2) ';

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $idAnkieta);
        $res = $query->getResult();
        return $res;
    }

    public function findPersonToNotificate($status, $sekcja = false)
    {
        $data = $this->createQueryBuilder('u')
            ->select('u.mail')
            ->where('u.powiadomienia = true');
        if ($status == 1)
            $data->andWhere('u.status = 1');
        if ($status == 2)
            $data->andWhere('u.status = 2');
        if ($status == 3)
            $data->andWhere('u.status = 2 OR u.status = 1');
        if ($status == 4)
            $data->andWhere('u.status = 4');
        if ($status == 5)
            $data->andWhere('u.status = 4 OR u.status = 1');
        if ($status == 6)
            $data->andWhere('u.status = 4 OR u.status = 2');
        if ($status == 7)
            $data->andWhere('u.status = 4 OR u.status = 1 OR u.status = 2');
        if ($sekcja == 1)
            $data->andWhere('u.sekcja = 1');
        if ($sekcja == 2)
            $data->andWhere('u.sekcja = 2');
        if ($sekcja == 3)
            $data->andWhere('u.sekcja = 2 OR u.sekcja = 1');
        if ($sekcja == 4)
            $data->andWhere('u.sekcja = 4');
        if ($sekcja == 5)
            $data->andWhere('u.sekcja = 4 OR u.sekcja = 1');
        if ($sekcja == 6)
            $data->andWhere('u.sekcja = 4 OR u.sekcja = 2');
        if ($sekcja == 7)
            $data->andWhere('u.sekcja = 4 OR u.sekcja = 1 OR u.sekcja = 2');
        /*{
            $data = $this->createQueryBuilder('u')
                ->select('u.mail')
                ->where('u.status <= :login')->setParameter('login', $status)
                ->where('u.sekcja <= :login1')->setParameter('login1', $sekcja)
                ->andWhere('u.powiadomienia = true')
                ->getQuery()->getResult();
        } else {
            $data = $this->createQueryBuilder('u')
                ->select('u.mail')
                ->where('u.status <= :login')->setParameter('login', $status)
                ->andWhere('u.powiadomienia = true')
                ->getQuery()->getResult();
        }*/
        $res = $data->getQuery()->getResult();
        echo '<pre>';
        \Doctrine\Common\Util\Debug::dump($res);
        echo '</pre>';
        $result = [];
        for ($i = 0; $i < count($res); $i++) {
            if ($res[$i]['mail'])
                array_push($result, $res[$i]['mail']);
        }
        return $result;
    }

    public function findRecruitToNotificate()
    {
        $data = $this->createQueryBuilder('u')
            ->select('u.mail')
            ->where('u.status = 1')
            ->getQuery()->getResult();
        $result = [];
        for ($i = 0; $i < count($data); $i++) {
            if ($data[$i]['mail'])
                array_push($result, $data[$i]['mail']);
        }
        return $result;
    }

    public function createImieNazwiskoView()
    {
        $rsm = new ResultSetMapping();
// build rsm here

        $query = $this->_em->createNativeQuery('SELECT id, name, discr FROM users WHERE name = ?', $rsm);
        $query->setParameter(1, 'romanb');

        $users = $query->getResult();
    }

    public function findPerson($firstLastName)
    {
        //$personId = $this->findPersonId($firstLastName);

        /*$data = $this->createQueryBuilder('u')
            ->where('u.id = :id')
            ->setParameter('id', $personId)
            ->getQuery()->getResult();*/

        $data = $this->createQueryBuilder('u')
            ->where('u.imie LIKE :firstLastName OR u.nazwisko LIKE :firstLastName')
            ->setParameter('firstLastName', "%" . $firstLastName . "%")
            ->andWhere('u.status = 4')
            ->getQuery()->getResult();

        return $data;
    }

    /**
     * @param $firstLastName
     * @return array
     */
    public function findPersonId($firstLastName)
    {
        $rsm = new ResultSetMapping();
        $query = $this->_em->createNativeQuery('Select o.* from osoby as o where o.id = (select im.id from imieNazwisko as im where im.nazwa like \'%jan hutek%\')', $rsm);
        $query->setParameter(1, '%' . $firstLastName . '%');
        $personId = $query->getResult();
        echo '<pre>';
        \Doctrine\Common\Util\Debug::dump($personId);
        echo '</pre>';

        return $personId;
    }

    public function findBirthday()
    {
        $currdate = new \DateTime();
        $data = $this->createQueryBuilder('u')
            ->select('u.imie, u.nazwisko')
            ->where('u.dataUrodzenia LIKE :param ')
            ->setParameter('param', "%" . $currdate->format('m-d') . "%")
            ->getQuery()->getResult();

        if (!$data) return false;
        else {
            $str = '';
            for ($i = 0; $i < count($data); $i++) {
                if ($i + 1 == count($data))
                    $str .= $data[$i]['imie'] . ' ' . $data[$i]['nazwisko'];
                else
                    $str .= $data[$i]['imie'] . ' ' . $data[$i]['nazwisko'] . '\n';
            }
        }
        return $str;
    }

    public function findPassportExpiration($id)
    {
        $currdate = new \DateTime();
        $data = $this->createQueryBuilder('u')
            ->select('u.dataPaszport')
            ->where('u.id = :id')
            ->setParameter('id', $id)
            ->getQuery()->getResult();
        if (!$data) return 0;
        else {
            $months6 = new \DateTime('+6months');
            $months8 = new \DateTime('+8months');
            if($data[0]['dataPaszport']>$months8 || $data[0]['dataPaszport']==NULL) return 0;
            if($data[0]['dataPaszport']<$months8 && $data[0]['dataPaszport']>$months6) return 8;
            if($data[0]['dataPaszport']< $months6) return 6;
        }
        return false;
    }
}

